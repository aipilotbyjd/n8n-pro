# Pull Request Validation Workflow
name: PR Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  GO_VERSION: '1.21'

jobs:
  # Job 1: Basic Validation
  validate:
    name: Basic Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check Go formatting
      run: |
        if [ "$(gofmt -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not properly formatted:"
          gofmt -l .
          exit 1
        fi

    - name: Check Go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod go.sum

    - name: Run Go vet
      run: go vet ./...

    - name: Install golangci-lint
      run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m

    - name: Check for TODO/FIXME comments
      run: |
        if grep -r "TODO\|FIXME" --include="*.go" .; then
          echo "Warning: Found TODO/FIXME comments in code"
          grep -r "TODO\|FIXME" --include="*.go" . || true
        fi

  # Job 2: Security Check
  security:
    name: Security Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'

    - name: Upload Gosec results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gosec.sarif

    - name: Run vulnerability check
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  # Job 3: Test Coverage
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: n8n
          POSTGRES_DB: n8n_pro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        DATABASE_URL: postgres://n8n:testpassword@localhost:5432/n8n_pro_test?sslmode=disable
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-jwt-secret-for-testing-only-not-for-production-use
        ENV: test

    - name: Check coverage threshold
      run: |
        coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        threshold=80
        echo "Test coverage: ${coverage}%"
        if (( $(echo "$coverage < $threshold" | bc -l) )); then
          echo "Coverage ${coverage}% is below threshold ${threshold}%"
          exit 1
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: pr-tests
        name: pr-coverage

  # Job 4: Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build for ${{ matrix.os }} ${{ matrix.arch }}
      run: |
        GOOS=$(echo ${{ matrix.os }} | cut -d'-' -f1)
        if [ "$GOOS" = "ubuntu" ]; then GOOS="linux"; fi
        if [ "$GOOS" = "macos" ]; then GOOS="darwin"; fi
        
        GOARCH=${{ matrix.arch }}
        CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build -v ./cmd/api

  # Job 5: Integration Test
  integration:
    name: Integration Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: n8n
          POSTGRES_DB: n8n_pro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run integration tests
      run: |
        go test -v -tags=integration ./test/integration/...
      env:
        DATABASE_URL: postgres://n8n:testpassword@localhost:5432/n8n_pro_test?sslmode=disable
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-jwt-secret-for-testing-only-not-for-production-use
        ENV: test

  # Job 6: Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: n8n-pro:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm n8n-pro:pr-${{ github.event.number }} --help

  # Job 7: Code Quality Analysis
  quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install analysis tools
      run: |
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
        go install github.com/client9/misspell/cmd/misspell@latest
        go install honnef.co/go/tools/cmd/staticcheck@latest

    - name: Run cyclomatic complexity check
      run: |
        gocyclo -over 15 . || echo "High complexity functions detected"

    - name: Run spell check
      run: |
        misspell -error .

    - name: Run staticcheck
      run: |
        staticcheck ./...

    - name: Check line length
      run: |
        # Check for lines longer than 120 characters
        find . -name "*.go" -exec awk 'length($0) > 120 {print FILENAME":"NR":"$0}' {} \; | head -20

  # Job 8: Dependency Analysis
  dependencies:
    name: Dependency Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check for direct dependencies
      run: |
        echo "Direct dependencies:"
        go list -m all | grep -v "^github.com/${{ github.repository }}"

    - name: Check for unused dependencies
      run: |
        go install github.com/dominikh/go-tools/cmd/staticcheck@latest
        go mod tidy
        git diff --exit-code go.mod go.sum

    - name: License check
      run: |
        # Add license checking logic here
        echo "Checking licenses of dependencies..."

  # Job 9: PR Size Check
  pr-size:
    name: PR Size Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check PR size
      run: |
        # Get the number of changed lines
        changed_lines=$(git diff --numstat origin/${{ github.base_ref }}...HEAD | awk '{sum += $1 + $2} END {print sum}')
        echo "Changed lines: $changed_lines"
        
        # Warn if PR is too large
        if [ $changed_lines -gt 1000 ]; then
          echo "⚠️ This PR is quite large ($changed_lines lines changed). Consider breaking it into smaller PRs."
        fi

  # Job 10: Documentation Check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for documentation updates
      run: |
        # Check if code changes require documentation updates
        if git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '\.(go)$' > /dev/null; then
          if ! git diff --name-only origin/${{ github.base_ref }}...HEAD | grep -E '(README|\.md)$' > /dev/null; then
            echo "⚠️ Code changes detected but no documentation updates found. Consider updating documentation."
          fi
        fi

    - name: Check README links
      run: |
        # Simple link checker for README
        if [ -f README.md ]; then
          echo "Checking README.md for broken links..."
          # Add link checking logic here
        fi

  # Final job that requires all checks to pass
  pr-ready:
    name: PR Ready for Review
    runs-on: ubuntu-latest
    needs: [validate, security, coverage, build, integration, docker-build, quality, dependencies]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "Validation: ${{ needs.validate.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Coverage: ${{ needs.coverage.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Integration: ${{ needs.integration.result }}"
        echo "Docker Build: ${{ needs.docker-build.result }}"
        echo "Quality: ${{ needs.quality.result }}"
        echo "Dependencies: ${{ needs.dependencies.result }}"
        
        if [[ "${{ needs.validate.result }}" != "success" || 
              "${{ needs.security.result }}" != "success" || 
              "${{ needs.coverage.result }}" != "success" || 
              "${{ needs.build.result }}" != "success" || 
              "${{ needs.integration.result }}" != "success" || 
              "${{ needs.docker-build.result }}" != "success" || 
              "${{ needs.quality.result }}" != "success" || 
              "${{ needs.dependencies.result }}" != "success" ]]; then
          echo "❌ Some checks failed. Please fix the issues before merging."
          exit 1
        else
          echo "✅ All checks passed! PR is ready for review."
        fi

    - name: Comment PR status
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const needs = ${{ toJSON(needs) }};
          let status = '✅ All checks passed! This PR is ready for review.';
          let allPassed = true;
          
          for (const [job, result] of Object.entries(needs)) {
            if (result.result !== 'success') {
              allPassed = false;
              break;
            }
          }
          
          if (!allPassed) {
            status = '❌ Some checks failed. Please review and fix the issues:';
            for (const [job, result] of Object.entries(needs)) {
              if (result.result !== 'success') {
                status += `\n- ${job}: ${result.result}`;
              }
            }
          }
          
          // Only comment if this is a new comment or status changed
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## PR Validation Status\n\n${status}`
          });