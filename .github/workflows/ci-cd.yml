# Comprehensive CI/CD Pipeline for n8n-pro
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Code Quality and Testing
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: n8n
          POSTGRES_DB: n8n_pro_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for SonarCloud

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        go install github.com/securecodewarrior/sast-scan/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run Go vet
      run: go vet ./...

    - name: Run golangci-lint
      run: golangci-lint run --timeout=5m

    - name: Run security scan
      run: gosec ./...

    - name: Run vulnerability check
      run: govulncheck ./...

    - name: Run unit tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
      env:
        DATABASE_URL: postgres://n8n:testpassword@localhost:5432/n8n_pro_test?sslmode=disable
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-jwt-secret-for-testing-only-not-for-production-use
        ENV: test

    - name: Run integration tests
      run: |
        go test -v -tags=integration ./test/integration/...
      env:
        DATABASE_URL: postgres://n8n:testpassword@localhost:5432/n8n_pro_test?sslmode=disable
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET: test-jwt-secret-for-testing-only-not-for-production-use
        ENV: test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          coverage.out
          test-results.xml

  # Job 2: Build and Security Scan
  build:
    name: Build and Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build binary
      run: |
        CGO_ENABLED=0 GOOS=linux go build \
          -ldflags="-w -s -X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u '+%Y-%m-%dT%H:%M:%SZ') -X main.gitCommit=${{ github.sha }}" \
          -o n8n-pro \
          ./cmd/api

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_VERSION=${{ github.ref_name }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.n8n-pro.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # This could be deploying to Kubernetes, AWS ECS, etc.
      env:
        STAGING_SERVER: ${{ secrets.STAGING_SERVER }}
        DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}

    - name: Run smoke tests
      run: |
        # Add smoke tests for staging deployment
        curl -f https://staging.n8n-pro.com/health || exit 1
        echo "Staging deployment successful"

    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 4: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: production
      url: https://n8n-pro.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
      env:
        PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
        DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}

    - name: Run production health checks
      run: |
        # Comprehensive health checks for production
        curl -f https://n8n-pro.com/health || exit 1
        curl -f https://n8n-pro.com/metrics || exit 1
        echo "Production deployment successful"

    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Notify Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 5: Performance Testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests
      run: |
        # Install k6 for load testing
        curl https://github.com/grafana/k6/releases/download/v0.46.0/k6-v0.46.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
        
        # Run performance tests
        ./k6 run --out json=performance-results.json test/performance/load-test.js
      env:
        TARGET_URL: https://staging.n8n-pro.com

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-results.json

  # Job 6: Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run comprehensive security audit
      run: |
        # Install security tools
        go install github.com/securecodewarrior/sast-scan/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest
        
        # Run security scans
        gosec -fmt sarif -out gosec-results.sarif ./...
        govulncheck -json ./... > govulncheck-results.json

    - name: Upload security results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec-results.sarif

    - name: Notify security team
      if: failure()
      run: |
        echo "Security vulnerabilities detected. Notifying security team..."
        # Add notification logic here

  # Job 7: Dependency Update
  dependency-update:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Check for dependency updates
      run: |
        go list -u -m all | grep -v "^github.com/${{ github.repository }}" > dependency-updates.txt
        if [ -s dependency-updates.txt ]; then
          echo "Dependencies with updates available:"
          cat dependency-updates.txt
        else
          echo "All dependencies are up to date"
        fi

    - name: Create dependency update issue
      if: hashFiles('dependency-updates.txt') != ''
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const updates = fs.readFileSync('dependency-updates.txt', 'utf8');
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Dependency Updates Available',
            body: `The following dependencies have updates available:\n\n\`\`\`\n${updates}\n\`\`\`\n\nPlease review and update as appropriate.`,
            labels: ['dependencies', 'maintenance']
          });

  # Job 8: Documentation Update
  docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Generate API documentation
      run: |
        go install golang.org/x/tools/cmd/godoc@latest
        mkdir -p docs/api
        godoc -http=:6060 &
        sleep 5
        curl -o docs/api/index.html http://localhost:6060/pkg/
        pkill godoc

    - name: Generate README badges
      run: |
        # Update README with latest build status, coverage, etc.
        echo "Updating documentation badges..."

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/
        git diff --staged --quiet || git commit -m "Update documentation [skip ci]"
        git push