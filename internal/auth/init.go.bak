package auth

import (
	"context"
	"fmt"
	"time"

	"n8n-pro/internal/db/postgres"
	"n8n-pro/pkg/logger"
)

// SimpleConfig holds basic configuration for auth service
type SimpleConfig struct {
	// Database configuration
	Database *postgres.Config
	
	// JWT configuration
	JWTSecret                string
	AccessTokenExpiration    time.Duration
	RefreshTokenExpiration   time.Duration
	
	// Password configuration
	MinPasswordLength        int
	MaxPasswordLength        int
	RequireSpecialCharacters bool
	RequireNumbers          bool
	RequireUppercase        bool
	RequireLowercase        bool
	
	// Session configuration
	SessionTimeout          time.Duration
	MaxFailedLogins         int
	AccountLockoutDuration  time.Duration
	
	// Email verification
	EmailVerificationExpiry time.Duration
	PasswordResetExpiry     time.Duration
}

// DefaultConfig returns a default configuration suitable for development
func DefaultConfig() *SimpleConfig {
	return &SimpleConfig{
		Database: postgres.DefaultConfig(),
		
		JWTSecret:              "development-secret-key-change-in-production",
		AccessTokenExpiration:  time.Hour * 24,      // 24 hours
		RefreshTokenExpiration: time.Hour * 24 * 7,  // 7 days
		
		MinPasswordLength:        8,
		MaxPasswordLength:        128,
		RequireSpecialCharacters: false, // Relaxed for development
		RequireNumbers:          false,
		RequireUppercase:        false,
		RequireLowercase:        false,
		
		SessionTimeout:         time.Hour * 24,
		MaxFailedLogins:        5,
		AccountLockoutDuration: time.Minute * 15,
		
		EmailVerificationExpiry: time.Hour * 24,
		PasswordResetExpiry:     time.Hour,
	}
}

// InitializeSimpleAuth creates a basic auth service with in-memory repositories
// This is suitable for development and testing
func InitializeSimpleAuth(log logger.Logger) (*EnhancedAuthService, error) {
	if log == nil {
		log = logger.New("auth-service")
	}

	// Create simple in-memory repositories
	userRepo := NewSimpleUserRepository()
	teamRepo := NewSimpleTeamRepository()
	orgRepo := NewSimpleOrganizationRepository()
	invitationRepo := NewSimpleInvitationRepository()
	apiKeyRepo := NewSimpleAPIKeyRepository()
	auditLogRepo := NewSimpleAuditLogRepository()
	sessionRepo := NewSimpleSessionRepository()

	// Create the enhanced auth service
	authService := &EnhancedAuthService{
		userRepo:       userRepo,
		teamRepo:       teamRepo,
		orgRepo:        orgRepo,
		invitationRepo: invitationRepo,
		apiKeyRepo:     apiKeyRepo,
		auditLogRepo:   auditLogRepo,
		sessionRepo:    sessionRepo,
		logger:         log,
	}

	log.Info("Simple auth service initialized with in-memory repositories")
	return authService, nil
}

// InitializeAuthWithDatabase creates an auth service with database-backed repositories
// This requires a working database connection
func InitializeAuthWithDatabase(cfg *SimpleConfig, log logger.Logger) (*EnhancedAuthService, error) {
	if cfg == nil {
		cfg = DefaultConfig()
	}
	
	if log == nil {
		log = logger.New("auth-service")
	}

	// Initialize database connection
	db, err := postgres.New(cfg.Database, log)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize database: %w", err)
	}

	// Test database connectivity
	ctx, cancel := context.WithTimeout(context.Background(), time.Second*5)
	defer cancel()
	
	if err := db.Health(ctx); err != nil {
		db.Close()
		return nil, fmt.Errorf("database health check failed: %w", err)
	}

	// For now, use simple repositories for all - database repositories need more work
	// TODO: Replace with proper database repositories when ready
	userRepo := NewSimpleUserRepository()
	teamRepo := NewSimpleTeamRepository()
	orgRepo := NewSimpleOrganizationRepository()
	invitationRepo := NewSimpleInvitationRepository()
	apiKeyRepo := NewSimpleAPIKeyRepository()
	auditLogRepo := NewSimpleAuditLogRepository()
	sessionRepo := NewSimpleSessionRepository()

	// Create the enhanced auth service
	authService := &EnhancedAuthService{
		userRepo:       userRepo,
		teamRepo:       teamRepo,
		orgRepo:        orgRepo,
		invitationRepo: invitationRepo,
		apiKeyRepo:     apiKeyRepo,
		auditLogRepo:   auditLogRepo,
		sessionRepo:    sessionRepo,
		logger:         log,
		db:             db, // Store DB reference for cleanup
	}

	log.Info("Auth service initialized with database repositories")
	return authService, nil
}

// Shutdown gracefully shuts down the auth service
func (s *EnhancedAuthService) Shutdown() error {
	if s.db != nil {
		s.db.Close()
		s.logger.Info("Database connection closed")
	}
	return nil
}

// CreateDefaultOrganization creates a default organization for initial setup
func (s *EnhancedAuthService) CreateDefaultOrganization(ctx context.Context) (*Organization, error) {
	defaultOrg := &Organization{
		ID:       GenerateID(),
		Name:     "Default Organization",
		Slug:     "default",
		Plan:     PlanFree,
		Settings: getDefaultOrganizationSettings(),
		Status:   "active",
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	err := s.orgRepo.CreateOrganization(ctx, defaultOrg)
	if err != nil {
		return nil, fmt.Errorf("failed to create default organization: %w", err)
	}

	s.logger.Info("Default organization created", "org_id", defaultOrg.ID, "name", defaultOrg.Name)
	return defaultOrg, nil
}

// CreateDefaultUser creates a default admin user for initial setup
func (s *EnhancedAuthService) CreateDefaultUser(ctx context.Context, orgID string) (*EnhancedUser, error) {
	defaultUser := &EnhancedUser{
		ID:             GenerateID(),
		OrganizationID: orgID,
		Email:          "admin@localhost",
		FirstName:      "Admin",
		LastName:       "User",
		FullName:       "Admin User",
		Status:         UserStatusActive,
		Role:           RoleOwner,
		EmailVerified:  true,
		CreatedAt:      time.Now(),
		UpdatedAt:      time.Now(),
		PasswordChangedAt: time.Now(),
	}

	// Set a default password hash (password: "admin123")
	defaultUser.PasswordHash = "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewOOTnKv0n2yZ7X2"

	err := s.userRepo.CreateUser(ctx, defaultUser)
	if err != nil {
		return nil, fmt.Errorf("failed to create default user: %w", err)
	}

	s.logger.Info("Default admin user created", "user_id", defaultUser.ID, "email", defaultUser.Email)
	return defaultUser, nil
}

// Helper function to generate IDs (placeholder - should use proper UUID generation)
func GenerateID() string {
	return fmt.Sprintf("id_%d", time.Now().UnixNano())
}

// Quick setup function for development
func QuickSetup(log logger.Logger) (*EnhancedAuthService, error) {
	authService, err := InitializeSimpleAuth(log)
	if err != nil {
		return nil, err
	}

	ctx := context.Background()

	// Create default organization
	org, err := authService.CreateDefaultOrganization(ctx)
	if err != nil {
		return nil, err
	}

	// Create default admin user
	_, err = authService.CreateDefaultUser(ctx, org.ID)
	if err != nil {
		return nil, err
	}

	return authService, nil
}