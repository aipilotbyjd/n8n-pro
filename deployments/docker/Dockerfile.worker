# Build stage
FROM golang:1.23-alpine AS builder

# Install dependencies for building
RUN apk add --no-cache git ca-certificates tzdata gcc musl-dev

# Create appuser for security
RUN adduser -D -g '' appuser

WORKDIR /build

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download
RUN go mod verify

# Copy source code
COPY . .

# Build the applications
RUN CGO_ENABLED=0 GOOS=linux go build \
    -ldflags='-w -s' \
    -o worker ./cmd/worker

RUN CGO_ENABLED=0 GOOS=linux go build \
    -ldflags='-w -s' \
    -o admin ./cmd/admin

# Production stage
FROM alpine:3.19

# Install runtime dependencies (including Node.js and Python for sandboxing)
RUN apk --no-cache add ca-certificates tzdata netcat-openbsd curl nodejs npm python3 py3-pip

# Copy user from builder
COPY --from=builder /etc/passwd /etc/passwd

# Create app directory
WORKDIR /app

# Copy built binaries
COPY --from=builder /build/worker ./bin/worker
COPY --from=builder /build/admin ./bin/admin

# Copy entrypoint script
COPY deployments/docker/entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/entrypoint.sh

# Use non-root user
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8082/health || exit 1

# Expose port
EXPOSE 8082

ENTRYPOINT ["entrypoint.sh"]
CMD ["./bin/worker"]
